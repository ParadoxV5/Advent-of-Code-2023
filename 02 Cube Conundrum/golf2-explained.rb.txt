p # `p`rint the result in debug from (which for Integers is the same as their ‚Äúnormal‚Äù text representation). e.g., `p foo #FIXME`
# Poetry mode code calls methods without round parens, e.g., `puts 'hello'`, `p foo`, `attr_reader :value`. Ruby also tokenizes at `$` here.
$< # Formally known as {ARGF}, which is an input stream that concatenates input data
.sum { # {ARGF} is an {Enumerable} of input lines and thus inherits {Enumerable#sum} for adding results of the block processing each entry.
  # sample lines: `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green`, `Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`
  # Transform each line into an addend (for-each without `for` or `each`).
  t=[0]*3 # Initialize the `t`allies to `[0, 0, 0]`.
  ; # Statements end on line breaks if possible and semicolons are unnecessary, yes; I just found line breaks ugly inside `{‚Ä¶}`.
  _1 # implicit block variable ‚Äì the current input line (explicit block args are expensive for ‚õ≥)
  .scan( # Scan for substring matches and send them to process in the inner block.
    /\d+ ./ # Regexp: an integer (consecutive digits), a `U+0020 space`, any char
  ){ # While `String#scan` has a block arg for the matched substring each loop, `_1`‚Äòs already used outside, so I used `$&` instead.
    # sample substrings: `3 b`, `4 r`, `1 r`, `2 g`, `6 b`, `2 g`, `3 b`, `4 r`, `1 r`, `2 g`, `6 b`, `2 g`
    # Process each match (of each input line) (yep, another `for`/`each`-less for-each).
    ( # Even `12√∑3√ó4` trip people up, imagine us ‚õ≥ers‚Äô love-hate relationship with the order of operations‚Ä¶
      t[ # your typical Array indexing
        i= # In Ruby, every statement is an expression (and vice-versa too).
        $& # Inherited from Perl, `$&` (AKA `Regexp.last_match`) is the most recent Regexp match ‚Äì what `scan` just matched.
        [ # your typical String indexing
          ~0 # bitwise-NOT of 0, which is -1
          # Recently I began preferring `[~x]` over `[-y]` because `a[~x] == a.reverse[x]` for both String and Array.
        ] # Grab the last char ‚Äì according to the description of the daily puzzle, it can only ever be `r`, `g` or `b`.
        .ord # Get the (last char‚Äôs) ASCII number.
        %3 # I ü§Øed when I discovered that the char numbers modulus 3 for `r`, `g` and `b` are 0, 1 and 2 respectively.
      ] # Now you see why I initialize `t` with __3__ `0`s ‚Äì it stores the numbers of `r`ed, `g`reen and `b`lue cubes in this order!
      < # Check if the stored number is less than ‚Äì
      n= # What did I say about statements and expressions?
      $&.to_i # Transform the text match to a useable number. {String#to_i} ignores non-number suffixes, so `'69 nice'.to_i` is still `69`.
    )&& # Boolean AND with short-circuiting ‚Äì`(x)&&y` is the same as `x and y` but more ‚õ≥ and `y if x` but not evaluated right-to-left.
    t[i]=n # Update the entry with the number (when it‚Äôs larger). Both the `i`ndex and the `n`umber are cached from left side of the `&&`.
  }; # The puzzle requires finding the minimum number of each color that sastisfy all subsets listed in each line. Thus I `t`allied maxes.
  eval # `eval`uate the String as code.
  t* # {Array#*} with a String on the right side is the same as {Array#join} ‚Äì concatenate into a String using the given delimiter.
  ?* # The given delimiter is `'*'` ‚Äì `?`-prefix syntax is merely a relic from back when chars are Integers rather than 1-length Strings.
  # The ‚Äúnormal‚Äù way is `t.inject(&:*)` (or `t.inject :*` utilizing a param in poem mode), but I found `eval t*?*` is more ‚õ≥.
} # For submitting answers, the daily puzzle asks for the sum of the product of each line‚Äôs minimum numbers, hence the `sum` and the `:*`.
